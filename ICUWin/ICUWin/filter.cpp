#include "filter.h"
#include "iostream"
double fir_mb[50]={
-0.000940895795466934,-0.000723570825009934,-0.000504858254411897,-0.000205597964749794,0.000256665082358683,0.000963097433562612,0.00198887648068588,0.00339861775569270,0.00524217453689476,0.00755104018952045,0.0103355571964583,0.0135830990571389,0.0172573440022303,0.0212987051836878,0.0256259234593074,0.0301387691653926,0.0347217415240330,0.0392486016509205,0.0435875303594374,0.0476066675397240,0.0511797677337802,0.0541916978920272,0.0565435087301224,0.0581568304052170,0.0589773754550483,0.0589773754550483,0.0581568304052170,0.0565435087301224,0.0541916978920272,0.0511797677337802,0.0476066675397240,0.0435875303594374,0.0392486016509205,0.0347217415240330,0.0301387691653926,0.0256259234593074,0.0212987051836878,0.0172573440022303,0.0135830990571389,0.0103355571964583,0.00755104018952045,0.00524217453689476,0.00339861775569270,0.00198887648068588,0.000963097433562612,0.000256665082358683,-0.000205597964749794,-0.000504858254411897,-0.000723570825009934,-0.000940895795466934
};//lowpass w0=5Hz
double firB[250]={
-0.000169415041438899,-0.000220215070703893,-0.000268179359788183,-0.000310717523624832,-0.000345399295430211,-0.000370055098591230,-0.000382884561208197,-0.000382570616054764,-0.000368394092457733,-0.000340340993561285,-0.000299192345315418,-0.000246584974609781,-0.000185031144170565,-0.000117885872543294,-4.92531090727178e-05,1.61743159464797e-05,7.33410706973981e-05,0.000117116266257818,0.000142628895739762,0.000145633508407165,0.000122882388896858,7.24763626770174e-05,-5.83593430449449e-06,-0.000110440468492320,-0.000237749465235902,-0.000382224641972884,-0.000536546631761689,-0.000691935381363658,-0.000838614966680488,-0.000966404198020946,-0.00106540250582798,-0.00112672989066872,-0.00114327116916212,-0.00111036924196326,-0.00102641037528221,-0.000893247008607977,-0.000716410566080260,-0.000505078009813059,-0.000271770933639512,-3.17840217254219e-05,0.000197640441966841,0.000398354991422431,0.000552509994883780,0.000643844204587068,0.000658977071513283,0.000588609654959653,0.000428539820321465,0.000180403113238655,-0.000147936677693269,-0.000542404112690466,-0.000983167943363404,-0.00144553934854243,-0.00190128434376983,-0.00232029047244372,-0.00267249816576898,-0.00292998166164878,-0.00306904521767353,-0.00307218934214170,-0.00292980023563051,-0.00264142433027551,-0.00221650880219028,-0.00167451755791150,-0.00104436908165262,-0.000363185634538743,0.000325609982110552,0.000974766561666048,0.00153611729108649,0.00196376615661931,0.00221735097857503,0.00226516767266787,0.00208693536116418,0.00167599158111651,0.00104073127850424,0.000205141762960453,-0.000791663436822893,-0.00189694851985557,-0.00304686739257801,-0.00416988539668662,-0.00519094636365492,-0.00603616131332338,-0.00663774700196635,-0.00693890932034585,-0.00689835121351220,-0.00649408928980247,-0.00572628835960957,-0.00461886824966868,-0.00321970051003374,-0.00159929094589098,0.000152066966641948,0.00192858789684383,0.00361456500653373,0.00509095127118651,0.00624261115867518,0.00696584212389596,0.00717572707103152,0.00681286556403414,0.00584904502671908,0.00429145377394903,0.00218510409823444,-0.000386777190478654,-0.00330452590580744,-0.00641600044679327,-0.00954261392710952,-0.0124872035224018,-0.0150433867268195,-0.0170059549134815,-0.0181817777342452,-0.0184006426838709,-0.0175254362978557,-0.0154610888898977,-0.0121617534771664,-0.00763576963413496,-0.00194807061155535,0.00478017838996934,0.0123747783381121,0.0206144468049457,0.0292392864804946,0.0379613973747145,0.0464771363036908,0.0544804305520555,0.0616764870174925,0.0677952077516540,0.0726036297054151,0.0759167506292532,0.0776061822954705,0.0776061822954705,0.0759167506292532,0.0726036297054151,0.0677952077516540,0.0616764870174925,0.0544804305520555,0.0464771363036908,0.0379613973747145,0.0292392864804946,0.0206144468049457,0.0123747783381121,0.00478017838996934,-0.00194807061155535,-0.00763576963413496,-0.0121617534771664,-0.0154610888898977,-0.0175254362978557,-0.0184006426838709,-0.0181817777342452,-0.0170059549134815,-0.0150433867268195,-0.0124872035224018,-0.00954261392710952,-0.00641600044679327,-0.00330452590580744,-0.000386777190478654,0.00218510409823444,0.00429145377394903,0.00584904502671908,0.00681286556403414,0.00717572707103152,0.00696584212389596,0.00624261115867518,0.00509095127118651,0.00361456500653373,0.00192858789684383,0.000152066966641948,-0.00159929094589098,-0.00321970051003374,-0.00461886824966868,-0.00572628835960957,-0.00649408928980247,-0.00689835121351220,-0.00693890932034585,-0.00663774700196635,-0.00603616131332338,-0.00519094636365492,-0.00416988539668662,-0.00304686739257801,-0.00189694851985557,-0.000791663436822893,0.000205141762960453,0.00104073127850424,0.00167599158111651,0.00208693536116418,0.00226516767266787,0.00221735097857503,0.00196376615661931,0.00153611729108649,0.000974766561666048,0.000325609982110552,-0.000363185634538743,-0.00104436908165262,-0.00167451755791150,-0.00221650880219028,-0.00264142433027551,-0.00292980023563051,-0.00307218934214170,-0.00306904521767353,-0.00292998166164878,-0.00267249816576898,-0.00232029047244372,-0.00190128434376983,-0.00144553934854243,-0.000983167943363404,-0.000542404112690466,-0.000147936677693269,0.000180403113238655,0.000428539820321465,0.000588609654959653,0.000658977071513283,0.000643844204587068,0.000552509994883780,0.000398354991422431,0.000197640441966841,-3.17840217254219e-05,-0.000271770933639512,-0.000505078009813059,-0.000716410566080260,-0.000893247008607977,-0.00102641037528221,-0.00111036924196326,-0.00114327116916212,-0.00112672989066872,-0.00106540250582798,-0.000966404198020946,-0.000838614966680488,-0.000691935381363658,-0.000536546631761689,-0.000382224641972884,-0.000237749465235902,-0.000110440468492320,-5.83593430449449e-06,7.24763626770174e-05,0.000122882388896858,0.000145633508407165,0.000142628895739762,0.000117116266257818,7.33410706973981e-05,1.61743159464797e-05,-4.92531090727178e-05,-0.000117885872543294,-0.000185031144170565,-0.000246584974609781,-0.000299192345315418,-0.000340340993561285,-0.000368394092457733,-0.000382570616054764,-0.000382884561208197,-0.000370055098591230,-0.000345399295430211,-0.000310717523624832,-0.000268179359788183,-0.000220215070703893,-0.000169415041438899
};
double firC[100]={
9.42508722928507e-05,0.000135733453116674,0.000183399561849090,0.000240118102447089,0.000308847911601491,0.000392599288723631,0.000494393826997792,0.000617223031878781,0.000764006236098878,0.000937548336605267,0.00114049788860443,0.00137530609485412,0.00164418722441558,0.00194908098424640,0.00229161734935748,0.00267308433294401,0.00309439914718836,0.00355608316866479,0.00405824107987594,0.00460054451092099,0.00518222045320473,0.00580204466108099,0.00645834019807135,0.00714898122254635,0.00787140204427462,0.00862261141883337,0.00939921198234945,0.0101974246652236,0.0110131178611994,0.0118418410681757,0.0126788626602984,0.0135192113978493,0.0143577212329644,0.0151890789259000,0.0160078739489994,0.0168086501241936,0.0175859584152206,0.0183344102781156,0.0190487309631457,0.0197238121584125,0.0203547633698764,0.0209369614445362,0.0214660976628081,0.0219382218525561,0.0223497830104278,0.0226976659557365,0.0229792235876295,0.0231923043671247,0.0233352747011612,0.0234070359654009,0.0234070359654009,0.0233352747011612,0.0231923043671247,0.0229792235876295,0.0226976659557365,0.0223497830104278,0.0219382218525561,0.0214660976628081,0.0209369614445362,0.0203547633698764,0.0197238121584125,0.0190487309631457,0.0183344102781156,0.0175859584152206,0.0168086501241936,0.0160078739489994,0.0151890789259000,0.0143577212329644,0.0135192113978493,0.0126788626602984,0.0118418410681757,0.0110131178611994,0.0101974246652236,0.00939921198234945,0.00862261141883337,0.00787140204427462,0.00714898122254635,0.00645834019807135,0.00580204466108099,0.00518222045320473,0.00460054451092099,0.00405824107987594,0.00355608316866479,0.00309439914718836,0.00267308433294401,0.00229161734935748,0.00194908098424640,0.00164418722441558,0.00137530609485412,0.00114049788860443,0.000937548336605267,0.000764006236098878,0.000617223031878781,0.000494393826997792,0.000392599288723631,0.000308847911601491,0.000240118102447089,0.000183399561849090,0.000135733453116674,9.42508722928507e-05
};

class FIR_Filter filter_hx;
class FIR_Filter filter_ecg;
class FIR_Filter filter_mbrr;
class FIR_Filter filter_mbri;

class FindMinMax FindMinMax_mb;
class FindMinMax FindMinMax_ecg;
FIR_Filter::FIR_Filter()
{
    count=0;
}

FIR_Filter::~FIR_Filter()
{

}

double FIR_Filter::RealFIR(float v)
{
    double sum=0;
    int i;
    for(i=N-1;i>0;i--)V[i]=V[i-1];
    V[0]=v;
    for(i=0;i<N;i++)sum+=(A[i])*(V[i]);
    if(count>N)return sum;
    else
    {
        count ++;
        return 0;
    }

}

void FIR_Filter::SetFilterA(double *AA,int NN)
{
    A=AA;
    N=NN;
}

FindMinMax::FindMinMax()
{
    LastV=0;
    IsFindLevel=false;
    N=500;
    N0=600;
    index=0;
    level_v_=0;
}

FindMinMax::~FindMinMax()
{
}

bool FindMinMax::input(double key, float in)
{
    bool IsFind=false;
    if(count>N0)
    {
        if(count==(N0+1))
        {
            index=count-MinN;
            /*
            std::cout<<"Min:"<<Min<<",key:"<<MinKey<<",count:"<<MinN<<std::endl;
            std::cout<<"Max:"<<Max<<",key:"<<MaxKey<<",count:"<<MaxN<<std::endl;
            std::cout<<"count:"<<count<<",Index:"<<index<<std::endl;
            std::cout<<"-------------------------------"<<std::endl;
            */
        }//init the window1
        if(index++<N)//find the max value and the first min value after the max value on the window x;
        {
            if(in>Max)
            {
                Max=in;
                MaxKey=key;
                MaxN=count;

                Min=in;
                MinKey=key;
                MinN=count;
            }else if(in<Min)
            {
                Min=in;
                MinKey=key;
                MinN=count;
            }
        }else//to confirm
        {
            if(Max<level_v_)
            {
                std::cout<<"err2"<<std::endl;
                index=count-MaxN;
                if(index>=N)index=0;
            }else if(index==N)
            {
                std::cout<<"err"<<std::endl;
                index=count-MaxN;
                if(index>=N)index=0;
            }else
            {
                maxkey=MaxKey;
                minkey=MaxKey;
                max=Max;
                min=Min;
                index=count-MaxN;
                if(index>=N)index=0;
                /*
                std::cout<<"Max:"<<Max<<",key:"<<MaxKey<<",count:"<<MaxN<<std::endl;
                std::cout<<"Min:"<<Min<<",key:"<<MinKey<<",count:"<<MinN<<std::endl;
                std::cout<<"count:"<<count<<",index:"<<index<<std::endl;
                */
                float temp;
                temp=max;
                Max=Min;
                min=temp;//exchange the max and min
                MaxKey=MinKey;
                MaxN=MinN;
                IsFind=true;
            }
        }
    }else
    {
        if(count==0)
        {
            Min=in;
            Max=in;
        }else
        {
            if(in<Min)
            {
                Min=in;
                MinKey=key;
                MinN=count;

                Max=Min;
                MaxKey=MinKey;
                MaxN=MinN;
            }

        }//to find the fisrt min value on the window0
    }
    count++;
    return IsFind;
}

void FindMinMax::Set(double difflevel)
{
    level_diff_=difflevel;
}
void FindMinMax::Set2(int n0, int n, float Level)
{
    level_v_=Level;
    N0=n0;
    N=n;
}
double ZhongZhiFilter(int N0, QList<double> DATE_RAW )
{
    double value_buf[200],temp;
    double sum=0;
    int count,i,j;
    if(N0>DATE_RAW.count()/2)return 0;
    for(count=0;count<DATE_RAW.count();count++)
    {
        value_buf[count] = DATE_RAW[count];
    }
    for (j=0;j<DATE_RAW.count()-1;j++)
    {
        for (i=0;i<DATE_RAW.count()-j;i++)
        {
            if ( value_buf[i]>value_buf[i+1] )
            {
                temp = value_buf[i];
                value_buf[i] = value_buf[i+1];
                value_buf[i+1] = temp;
            }
        }
    }
    for(count=N0;count<DATE_RAW.count()-N0;count++)
        sum += value_buf[count];
    return (double)(sum/(DATE_RAW.count()-2*N0));
}
